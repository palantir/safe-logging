public final class SafeLoggable {

    public static String renderArgs(String message, List<Arg<?>> arguments) {
        Pattern pattern = Pattern.compile("\\{([^\\}]*)\\}");
        Matcher matcher = pattern.matcher(message);
        List<String> messageBindings = new LinkedList<>();
        while (matcher.find()) {
            messageBindings.add(matcher.group(1));
        }
        Iterator<String> nonBindedArgs = arguments.stream()
                .filter(arg -> !messageBindings.contains(arg.getName()))
                .map(arg -> arg.getValue().toString())
                .iterator();
        Map<String, String> bindings = arguments.stream()
                .collect(Collectors.toMap(Arg::getName, arg -> arg.getValue().toString()));

        String rendered = replaceAll(message, pattern, group -> {
            if (group.equals("")) {
                return nonBindedArgs.hasNext() ? nonBindedArgs.next() : "[no param]";
            } else {
                return bindings.containsKey(group) ? bindings.get(group) : "[no param]";
            }
        });

        return rendered + "\n" + "args: {" + bindings.entrySet().stream()
                .map(arg -> arg.getKey() + ": " + arg.getValue()).collect(Collectors.joining(", "))
                + "}";
    }

    private static String replaceAll(String templateText, Pattern pattern,
            Function<String, String> replacer) {
        Matcher matcher = pattern.matcher(templateText);
        StringBuffer result = new StringBuffer();
        while (matcher.find()) {
            matcher.appendReplacement(result, replacer.apply(matcher.group(1)));
        }
        matcher.appendTail(result);
        return result.toString();
    }
}
